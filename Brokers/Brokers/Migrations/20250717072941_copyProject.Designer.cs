// <auto-generated />
using System;
using Brokers.models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Brokers.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250717072941_copyProject")]
    partial class copyProject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Broker", b =>
                {
                    b.Property<string>("BrokerCode")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("BROKER_CODE");

                    b.Property<string>("BrokerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BROKER_ADDRESS");

                    b.Property<string>("BrokerFax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BROK_FAX");

                    b.Property<string>("BrokerLongName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BROKER_LONG_NAME");

                    b.Property<string>("BrokerNameEng")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BROKER_NAME_ENG");

                    b.Property<string>("BrokerShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BROKER_SHORT_NAME");

                    b.Property<string>("BrokerTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BROK_TEL1");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LAST_UPDATE_DATE");

                    b.Property<string>("SuspensionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SUSPENSION_CODE");

                    b.HasKey("BrokerCode");

                    b.ToTable("Brokers");
                });

            modelBuilder.Entity("Brokers.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
